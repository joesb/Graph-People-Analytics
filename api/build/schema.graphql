directive @cypher(statement: String) on FIELD_DEFINITION
directive @relation(
    name: String
    direction: _RelationDirections
    from: String
    to: String
) on FIELD_DEFINITION | OBJECT
directive @additionalLabels(labels: [String]) on OBJECT
directive @MutationMeta(
    relationship: String
    from: String
    to: String
) on FIELD_DEFINITION
directive @neo4j_ignore on FIELD_DEFINITION
input _EthnicityFilter {
    AND: [_EthnicityFilter!]
    OR: [_EthnicityFilter!]
    id: Int
    id_not: Int
    id_in: [Int!]
    id_not_in: [Int!]
    id_lt: Int
    id_lte: Int
    id_gt: Int
    id_gte: Int
    name: String
    name_not: String
    name_in: [String!]
    name_not_in: [String!]
    name_contains: String
    name_not_contains: String
    name_starts_with: String
    name_not_starts_with: String
    name_ends_with: String
    name_not_ends_with: String
}

input _EthnicityGroupFilter {
    AND: [_EthnicityGroupFilter!]
    OR: [_EthnicityGroupFilter!]
    id: Int
    id_not: Int
    id_in: [Int!]
    id_not_in: [Int!]
    id_lt: Int
    id_lte: Int
    id_gt: Int
    id_gte: Int
    name: String
    name_not: String
    name_in: [String!]
    name_not_in: [String!]
    name_contains: String
    name_not_contains: String
    name_starts_with: String
    name_not_starts_with: String
    name_ends_with: String
    name_not_ends_with: String
}

input _EthnicityGroupInput {
    id: Int!
}

enum _EthnicityGroupOrdering {
    id_asc
    id_desc
    name_asc
    name_desc
    _id_asc
    _id_desc
}

input _EthnicityInput {
    id: Int!
}

enum _EthnicityOrdering {
    id_asc
    id_desc
    name_asc
    name_desc
    _id_asc
    _id_desc
}

type _Neo4jDate {
    year: Int
    month: Int
    day: Int
    formatted: String
}

input _Neo4jDateInput {
    year: Int
    month: Int
    day: Int
    formatted: String
}

type _Neo4jDateTime {
    year: Int
    month: Int
    day: Int
    hour: Int
    minute: Int
    second: Int
    millisecond: Int
    microsecond: Int
    nanosecond: Int
    timezone: String
    formatted: String
}

input _Neo4jDateTimeInput {
    year: Int
    month: Int
    day: Int
    hour: Int
    minute: Int
    second: Int
    millisecond: Int
    microsecond: Int
    nanosecond: Int
    timezone: String
    formatted: String
}

type _Neo4jLocalDateTime {
    year: Int
    month: Int
    day: Int
    hour: Int
    minute: Int
    second: Int
    millisecond: Int
    microsecond: Int
    nanosecond: Int
    formatted: String
}

input _Neo4jLocalDateTimeInput {
    year: Int
    month: Int
    day: Int
    hour: Int
    minute: Int
    second: Int
    millisecond: Int
    microsecond: Int
    nanosecond: Int
    formatted: String
}

type _Neo4jLocalTime {
    hour: Int
    minute: Int
    second: Int
    millisecond: Int
    microsecond: Int
    nanosecond: Int
    formatted: String
}

input _Neo4jLocalTimeInput {
    hour: Int
    minute: Int
    second: Int
    millisecond: Int
    microsecond: Int
    nanosecond: Int
    formatted: String
}

type _Neo4jPoint {
    x: Float
    y: Float
    z: Float
    longitude: Float
    latitude: Float
    height: Float
    crs: String
    srid: Int
}

input _Neo4jPointDistanceFilter {
    point: _Neo4jPointInput!
    distance: Float!
}

input _Neo4jPointInput {
    x: Float
    y: Float
    z: Float
    longitude: Float
    latitude: Float
    height: Float
    crs: String
    srid: Int
}

type _Neo4jTime {
    hour: Int
    minute: Int
    second: Int
    millisecond: Int
    microsecond: Int
    nanosecond: Int
    timezone: String
    formatted: String
}

input _Neo4jTimeInput {
    hour: Int
    minute: Int
    second: Int
    millisecond: Int
    microsecond: Int
    nanosecond: Int
    timezone: String
    formatted: String
}

input _PersonFilter {
    AND: [_PersonFilter!]
    OR: [_PersonFilter!]
    id: Int
    id_not: Int
    id_in: [Int!]
    id_not_in: [Int!]
    id_lt: Int
    id_lte: Int
    id_gt: Int
    id_gte: Int
    name: String
    name_not: String
    name_in: [String!]
    name_not_in: [String!]
    name_contains: String
    name_not_contains: String
    name_starts_with: String
    name_not_starts_with: String
    name_ends_with: String
    name_not_ends_with: String
    givenName: String
    givenName_not: String
    givenName_in: [String!]
    givenName_not_in: [String!]
    givenName_contains: String
    givenName_not_contains: String
    givenName_starts_with: String
    givenName_not_starts_with: String
    givenName_ends_with: String
    givenName_not_ends_with: String
    familyName: String
    familyName_not: String
    familyName_in: [String!]
    familyName_not_in: [String!]
    familyName_contains: String
    familyName_not_contains: String
    familyName_starts_with: String
    familyName_not_starts_with: String
    familyName_ends_with: String
    familyName_not_ends_with: String
    fullName: String
    fullName_not: String
    fullName_in: [String!]
    fullName_not_in: [String!]
    fullName_contains: String
    fullName_not_contains: String
    fullName_starts_with: String
    fullName_not_starts_with: String
    fullName_ends_with: String
    fullName_not_ends_with: String
    honorificPrefix: String
    honorificPrefix_not: String
    honorificPrefix_in: [String!]
    honorificPrefix_not_in: [String!]
    honorificPrefix_contains: String
    honorificPrefix_not_contains: String
    honorificPrefix_starts_with: String
    honorificPrefix_not_starts_with: String
    honorificPrefix_ends_with: String
    honorificPrefix_not_ends_with: String
    honorificSuffix: String
    honorificSuffix_not: String
    honorificSuffix_in: [String!]
    honorificSuffix_not_in: [String!]
    honorificSuffix_contains: String
    honorificSuffix_not_contains: String
    honorificSuffix_starts_with: String
    honorificSuffix_not_starts_with: String
    honorificSuffix_ends_with: String
    honorificSuffix_not_ends_with: String
    pronouns: String
    pronouns_not: String
    pronouns_in: [String!]
    pronouns_not_in: [String!]
    pronouns_contains: String
    pronouns_not_contains: String
    pronouns_starts_with: String
    pronouns_not_starts_with: String
    pronouns_ends_with: String
    pronouns_not_ends_with: String
}

input _PersonInput {
    id: Int!
}

enum _PersonOrdering {
    id_asc
    id_desc
    name_asc
    name_desc
    givenName_asc
    givenName_desc
    familyName_asc
    familyName_desc
    fullName_asc
    fullName_desc
    honorificPrefix_asc
    honorificPrefix_desc
    honorificSuffix_asc
    honorificSuffix_desc
    pronouns_asc
    pronouns_desc
    _id_asc
    _id_desc
}

enum _RelationDirections {
    IN
    OUT
}

scalar DateTime

type Ethnicity {
    name: String
    group(
        first: Int
        offset: Int
        orderBy: [_EthnicityGroupOrdering]
    ): [EthnicityGroup] @cypher(statement: "MATCH (this)-[:categoryOf]->(g) RETURN g")
    _id: Int
}

type EthnicityGroup {
    name: String
    _id: Int
    ethnicities: [Ethnicity] @cypher(statement: "MATCH (this)<-[:categoryOf]-(e) RETURN e")
}

type Mutation {
    CreatePerson(
        id: Int!
        name: String
        givenName: String
        familyName: String
        fullName: String
        honorificPrefix: String
        honorificSuffix: String
        pronouns: String
    ): Person
    UpdatePerson(
        id: Int!
        name: String
        givenName: String
        familyName: String
        fullName: String
        honorificPrefix: String
        honorificSuffix: String
        pronouns: String
    ): Person
    DeletePerson(id: Int!): Person
    MergePerson(
        id: Int!
        name: String
        givenName: String
        familyName: String
        fullName: String
        honorificPrefix: String
        honorificSuffix: String
        pronouns: String
    ): Person
    CreateEthnicity(id: Int!, name: String): Ethnicity
    UpdateEthnicity(id: Int!, name: String): Ethnicity
    DeleteEthnicity(id: Int!): Ethnicity
    MergeEthnicity(id: Int!, name: String): Ethnicity
    CreateEthnicityGroup(id: Int!, name: String): EthnicityGroup
    UpdateEthnicityGroup(id: Int!, name: String): EthnicityGroup
    DeleteEthnicityGroup(id: Int!): EthnicityGroup
    MergeEthnicityGroup(id: Int!, name: String): EthnicityGroup
}

type Person {
    name: String
    givenName: String
    familyName: String
    fullName: String
    honorificPrefix: String
    honorificSuffix: String
    pronouns: String
    birthDate: _Neo4jDate
    _id: Int
    ethnicity: [Ethnicity] @cypher(statement: "MATCH (this)-[:hasEthnicity]->(e:Ethnicity) RETURN e")
}

type Query {
    Person(
        name: String
        givenName: String
        familyName: String
        fullName: String
        honorificPrefix: String
        honorificSuffix: String
        pronouns: String
        birthDate: _Neo4jDate
        _id: Int
        first: Int
        offset: Int
        orderBy: [_PersonOrdering]
        filter: _PersonFilter
    ): [Person]
    Ethnicity(
        name: String
        _id: Int
        first: Int
        offset: Int
        orderBy: [_EthnicityOrdering]
        filter: _EthnicityFilter
    ): [Ethnicity]
    EthnicityGroup(
        name: String
        _id: Int
        first: Int
        offset: Int
        orderBy: [_EthnicityGroupOrdering]
        filter: _EthnicityGroupFilter
    ): [EthnicityGroup]
}

